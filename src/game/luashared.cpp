#include "luashared.h"CLuaShared::CLuaShared(lua_State *L){	lua_register(L, ToLower("LuaNetCreate"), LuaNetCreate);	lua_register(L, ToLower("LuaNetConnect"), LuaNetConnect);	lua_register(L, ToLower("LuaNetClose"), LuaNetClose);	lua_register(L, ToLower("LuaNetSend"), LuaNetClose);	lua_register(L, ToLower("LuaNetRecv"), LuaNetRecv);	lua_register(L, ToLower("LuaNetGetStatus"), LuaNetGetStatus);}CLuaShared::~CLuaShared(){	Clear();}CLuaShared::FreeSocket(CLuaSocket *pSocket){	if (pSocket->m_Type == LUANETTYPETCP && pSocket->m_pNetTCP)	{		delete []pSocket->m_pNetTCP;	}	if (pSocket->m_Type == LUANETTYPEUDP && pSocket->m_pNetUDP)	{		delete []pSocket->m_pNetUDP;		}}CLuaShared::Clear(){	for (array<CLuaSocket *>::range r = m_lpSockets.all(); !r.empty(); r.pop_front())	{		FreeSocket(r);	}	m_lpSockets.clear();}static int CLuaShared::NetCreate(lua_State *L){	LUA_FUNCTION_HEADER	if (!lua_isstring(L, 1))		return 0;	if (str_comp_nocase(lua_tostring(L, 1), "tcp") == 0)	{		CLuaSocket *pNewSocket = new CLuaSocket();		pNewSocket->m_pNetTCP = new CNetTCP();		pNewSocket->m_pNetUDP = 0;		pNewSocket->m_ID = m_SocketID++;		pNewSocket->m_Type = LUANETTYPETCP;				NETADDR BindAddr;		mem_zero(&BindAddr, sizeof(BindAddr));		net_addr_from_str(&BindAddr, lua_tostring(L, 2));				pNewSocket->m_pNewTCP->Open(BindAddr);		m_lpSockets.insert(pNewSocket);	}	if (str_comp_nocase(lua_tostring(L, 1), "udp") == 0)	{		CLuaSocket *pNewSocket = new CLuaSocket();		pNewSocket->m_pNetTCP = 0;		pNewSocket->m_pNetUDP = new CNetUDP();		pNewSocket->m_ID = m_SocketID++;		pNewSocket->m_Type = LUANETTYPEUDP;		NETADDR BindAddr;		mem_zero(&BindAddr, sizeof(BindAddr));		net_addr_from_str(&BindAddr, lua_tostring(L, 2));				pNewSocket->m_pNewUDP->Open(BindAddr);				m_lpSockets.insert(pNewSocket);	}	return 0;}static int CLuaShared::NetConnect(lua_State *L){	if (!lua_isnumber(L, 1))		return 0;	int SocketID = lua_tonumber(L, 1);		for (array<CLuaSocket *>::range r = m_lpSockets.all(); !r.empty(); r.pop_front())	{		if (r.front()->m_ID == SocketID())		{			if (r.front()->m_Type == LUANETTYPETCP)			{				if (!lua_isstring(L, 2))					return 0;				NETADDR ConnAddr;				net_addr_from_str(&ConnAddr, lua_tostring(L, 2));				r.front()->m_pNetTCP->Connect(ConnAddr);								lua_pushboolean(L, 1);				return 1;			}			break;		}	}	return 0;}